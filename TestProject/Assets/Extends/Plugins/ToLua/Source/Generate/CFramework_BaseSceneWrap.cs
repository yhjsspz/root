//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CFramework_BaseSceneWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CFramework.BaseScene), typeof(CFramework.BaseView));
		L.RegFunction("AddModule", AddModule);
		L.RegFunction("AddWindow", AddWindow);
		L.RegFunction("AddTip", AddTip);
		L.RegFunction("GetModule", GetModule);
		L.RegFunction("GetWindow", GetWindow);
		L.RegFunction("GetSysWindow", GetSysWindow);
		L.RegFunction("GetTopWindow", GetTopWindow);
		L.RegFunction("IsTopWindow", IsTopWindow);
		L.RegFunction("RemoveAllWindow", RemoveAllWindow);
		L.RegFunction("RemoveWindow", RemoveWindow);
		L.RegFunction("RemoveModule", RemoveModule);
		L.RegFunction("OnInit", OnInit);
		L.RegFunction("RemoveAllModule", RemoveAllModule);
		L.RegFunction("RemoveAllSysWindow", RemoveAllSysWindow);
		L.RegFunction("RemoveAllTip", RemoveAllTip);
		L.RegFunction("RemoveGuide", RemoveGuide);
		L.RegFunction("RemoveSysWindow", RemoveSysWindow);
		L.RegFunction("RemoveTip", RemoveTip);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateCFramework_BaseScene);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("TipLayer", get_TipLayer, set_TipLayer);
		L.RegVar("GuideLayer", get_GuideLayer, set_GuideLayer);
		L.RegVar("WindowLayer", get_WindowLayer, set_WindowLayer);
		L.RegVar("SysLayer", get_SysLayer, set_SysLayer);
		L.RegVar("LoadingId", get_LoadingId, set_LoadingId);
		L.RegVar("ProgressCallback", get_ProgressCallback, null);
		L.RegVar("CompleteCallback", get_CompleteCallback, set_CompleteCallback);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateCFramework_BaseScene(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 6)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string[] arg1 = ToLua.CheckStringArray(L, 2);
				System.Action<CFramework.BaseScene> arg2 = (System.Action<CFramework.BaseScene>)ToLua.CheckDelegate<System.Action<CFramework.BaseScene>>(L, 3);
				System.Action<int> arg3 = (System.Action<int>)ToLua.CheckDelegate<System.Action<int>>(L, 4);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
				UnityEngine.Transform arg5 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 6);
				CFramework.BaseScene obj = new CFramework.BaseScene(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: CFramework.BaseScene.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddModule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			string arg3 = ToLua.CheckString(L, 5);
			System.Action<CFramework.BaseModule> arg4 = (System.Action<CFramework.BaseModule>)ToLua.CheckDelegate<System.Action<CFramework.BaseModule>>(L, 6);
			obj.AddModule(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 10);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			string[] arg3 = ToLua.CheckStringArray(L, 5);
			bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
			bool arg5 = LuaDLL.luaL_checkboolean(L, 7);
			bool arg6 = LuaDLL.luaL_checkboolean(L, 8);
			System.Action<CFramework.BaseWindow> arg7 = (System.Action<CFramework.BaseWindow>)ToLua.CheckDelegate<System.Action<CFramework.BaseWindow>>(L, 9);
			System.Action<int,int> arg8 = (System.Action<int,int>)ToLua.CheckDelegate<System.Action<int,int>>(L, 10);
			obj.AddWindow(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.AddTip(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetModule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			CFramework.BaseModule o = obj.GetModule(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			CFramework.BaseWindow o = obj.GetWindow(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSysWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			CFramework.BaseWindow o = obj.GetSysWindow(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTopWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			CFramework.BaseWindow o = obj.GetTopWindow();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsTopWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsTopWindow(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				obj.RemoveAllWindow();
				return 0;
			}
			else if (count == 2)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.RemoveAllWindow(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.BaseScene.RemoveAllWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.RemoveWindow(arg0);
				return 0;
			}
			else if (count == 3)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.RemoveWindow(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.BaseScene.RemoveWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveModule(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.RemoveModule(arg0);
				return 0;
			}
			else if (count == 3)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.RemoveModule(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.BaseScene.RemoveModule");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			obj.OnInit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllModule(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				obj.RemoveAllModule();
				return 0;
			}
			else if (count == 2)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.RemoveAllModule(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.BaseScene.RemoveAllModule");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllSysWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				obj.RemoveAllSysWindow();
				return 0;
			}
			else if (count == 2)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.RemoveAllSysWindow(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.BaseScene.RemoveAllSysWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllTip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			obj.RemoveAllTip();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveGuide(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				obj.RemoveGuide();
				return 0;
			}
			else if (count == 2)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.RemoveGuide(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.BaseScene.RemoveGuide");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSysWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.RemoveSysWindow(arg0);
				return 0;
			}
			else if (count == 3)
			{
				CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.RemoveSysWindow(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.BaseScene.RemoveSysWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveTip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.RemoveTip(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TipLayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			UnityEngine.Transform ret = obj.TipLayer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TipLayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GuideLayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			UnityEngine.Transform ret = obj.GuideLayer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GuideLayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WindowLayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			UnityEngine.Transform ret = obj.WindowLayer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WindowLayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SysLayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			UnityEngine.Transform ret = obj.SysLayer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SysLayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadingId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			string ret = obj.LoadingId;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadingId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProgressCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			System.Action<int> ret = obj.ProgressCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProgressCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CompleteCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			System.Action<CFramework.BaseScene> ret = obj.CompleteCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CompleteCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TipLayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.TipLayer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TipLayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GuideLayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.GuideLayer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GuideLayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WindowLayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.WindowLayer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WindowLayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SysLayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.SysLayer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SysLayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadingId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.LoadingId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadingId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CompleteCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.BaseScene obj = (CFramework.BaseScene)o;
			System.Action<CFramework.BaseScene> arg0 = (System.Action<CFramework.BaseScene>)ToLua.CheckDelegate<System.Action<CFramework.BaseScene>>(L, 2);
			obj.CompleteCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CompleteCallback on a nil value");
		}
	}
}

