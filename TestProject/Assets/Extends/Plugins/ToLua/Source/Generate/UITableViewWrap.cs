//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UITableViewWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UITableView), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("CreateTableView", CreateTableView);
		L.RegFunction("SetItemSkin", SetItemSkin);
		L.RegFunction("SetItemCount", SetItemCount);
		L.RegFunction("SetItemHeight", SetItemHeight);
		L.RegFunction("OnEndDrag", OnEndDrag);
		L.RegFunction("ResetScrollPosition", ResetScrollPosition);
		L.RegFunction("UpdateRow", UpdateRow);
		L.RegFunction("UpdateView", UpdateView);
		L.RegFunction("Clear", Clear);
		L.RegFunction("setTableCellWithShowedDelegate", setTableCellWithShowedDelegate);
		L.RegFunction("getTableCellWithShowedDelegate", getTableCellWithShowedDelegate);
		L.RegFunction("setNewLoadingDelegate", setNewLoadingDelegate);
		L.RegFunction("SetNewLoadingState", SetNewLoadingState);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("useLoopItems", get_useLoopItems, set_useLoopItems);
		L.RegVar("GetScrollRect", get_GetScrollRect, null);
		L.RegVar("verticalPos", get_verticalPos, set_verticalPos);
		L.RegVar("horizonPos", get_horizonPos, set_horizonPos);
		L.RegFunction("TableCellWithShowedDelegate", UITableView_TableCellWithShowedDelegate);
		L.RegFunction("NewLoadingDelegate", UITableView_NewLoadingDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateTableView(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UITableView o = UITableView.CreateTableView(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UITableView o = UITableView.CreateTableView(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				UITableView o = UITableView.CreateTableView(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UITableView.CreateTableView");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetItemSkin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.SetItemSkin(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetItemCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetItemCount(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetItemHeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetItemHeight(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEndDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnEndDrag(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetScrollPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
				obj.ResetScrollPosition();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.ResetScrollPosition(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<bool>(L, 2))
			{
				UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
				bool arg0 = LuaDLL.lua_toboolean(L, 2);
				obj.ResetScrollPosition(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UITableView.ResetScrollPosition");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateRow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.UpdateRow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateView(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
				obj.UpdateView();
				return 0;
			}
			else if (count == 2)
			{
				UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.UpdateView(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.UpdateView(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UITableView.UpdateView");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTableCellWithShowedDelegate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
			UITableView.TableCellWithShowedDelegate arg0 = (UITableView.TableCellWithShowedDelegate)ToLua.CheckDelegate<UITableView.TableCellWithShowedDelegate>(L, 2);
			obj.setTableCellWithShowedDelegate(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getTableCellWithShowedDelegate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
			UITableView.TableCellWithShowedDelegate o = obj.getTableCellWithShowedDelegate();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setNewLoadingDelegate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
			UITableView.NewLoadingDelegate arg0 = (UITableView.NewLoadingDelegate)ToLua.CheckDelegate<UITableView.NewLoadingDelegate>(L, 2);
			obj.setNewLoadingDelegate(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNewLoadingState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UITableView obj = (UITableView)ToLua.CheckObject<UITableView>(L, 1);
			obj.SetNewLoadingState();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useLoopItems(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UITableView obj = (UITableView)o;
			bool ret = obj.useLoopItems;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useLoopItems on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetScrollRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UITableView obj = (UITableView)o;
			UnityEngine.UI.ScrollRect ret = obj.GetScrollRect;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GetScrollRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_verticalPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UITableView obj = (UITableView)o;
			float ret = obj.verticalPos;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index verticalPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_horizonPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UITableView obj = (UITableView)o;
			float ret = obj.horizonPos;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index horizonPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useLoopItems(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UITableView obj = (UITableView)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useLoopItems = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useLoopItems on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_verticalPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UITableView obj = (UITableView)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.verticalPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index verticalPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_horizonPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UITableView obj = (UITableView)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.horizonPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index horizonPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UITableView_TableCellWithShowedDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UITableView.TableCellWithShowedDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UITableView.TableCellWithShowedDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UITableView_NewLoadingDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UITableView.NewLoadingDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UITableView.NewLoadingDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

