//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CFramework_ScriptFuncWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CFramework.ScriptFunc), typeof(CFramework.Singleton<CFramework.ScriptFunc>));
		L.RegFunction("AddTimer", AddTimer);
		L.RegFunction("RemoveTimer", RemoveTimer);
		L.RegFunction("NewSpineAni", NewSpineAni);
		L.RegFunction("NewSpineAniSync", NewSpineAniSync);
		L.RegFunction("createSpineAni", createSpineAni);
		L.RegFunction("SetSpineEvent", SetSpineEvent);
		L.RegFunction("NewUISpineAni", NewUISpineAni);
		L.RegFunction("LoadPrefab", LoadPrefab);
		L.RegFunction("TextureToSprite", TextureToSprite);
		L.RegFunction("ConvertToEaseType", ConvertToEaseType);
		L.RegFunction("New", _CreateCFramework_ScriptFunc);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateCFramework_ScriptFunc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				CFramework.ScriptFunc obj = new CFramework.ScriptFunc();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: CFramework.ScriptFunc.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTimer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
				obj.AddTimer(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				obj.AddTimer(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.ScriptFunc.AddTimer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveTimer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveTimer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewSpineAni(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 6)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 6);
				obj.NewSpineAni(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 7)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 6);
				string arg5 = ToLua.CheckString(L, 7);
				obj.NewSpineAni(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 8)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 6);
				string arg5 = ToLua.CheckString(L, 7);
				bool arg6 = LuaDLL.luaL_checkboolean(L, 8);
				obj.NewSpineAni(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.ScriptFunc.NewSpineAni");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewSpineAniSync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				Spine.Unity.SkeletonAnimation o = obj.NewSpineAniSync(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				string arg4 = ToLua.CheckString(L, 6);
				Spine.Unity.SkeletonAnimation o = obj.NewSpineAniSync(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 7)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				string arg4 = ToLua.CheckString(L, 6);
				bool arg5 = LuaDLL.luaL_checkboolean(L, 7);
				Spine.Unity.SkeletonAnimation o = obj.NewSpineAniSync(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.ScriptFunc.NewSpineAniSync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int createSpineAni(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				UnityEngine.AssetBundle arg1 = (UnityEngine.AssetBundle)ToLua.CheckObject(L, 3, typeof(UnityEngine.AssetBundle));
				string arg2 = ToLua.CheckString(L, 4);
				Spine.Unity.SkeletonAnimation o = obj.createSpineAni(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				UnityEngine.AssetBundle arg1 = (UnityEngine.AssetBundle)ToLua.CheckObject(L, 3, typeof(UnityEngine.AssetBundle));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				Spine.Unity.SkeletonAnimation o = obj.createSpineAni(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				UnityEngine.AssetBundle arg1 = (UnityEngine.AssetBundle)ToLua.CheckObject(L, 3, typeof(UnityEngine.AssetBundle));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
				Spine.Unity.SkeletonAnimation o = obj.createSpineAni(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.ScriptFunc.createSpineAni");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSpineEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
			Spine.AnimationState arg0 = (Spine.AnimationState)ToLua.CheckObject<Spine.AnimationState>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			obj.SetSpineEvent(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewUISpineAni(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 6)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 6);
				obj.NewUISpineAni(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 7)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 6);
				string arg5 = ToLua.CheckString(L, 7);
				obj.NewUISpineAni(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 8)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 6);
				string arg5 = ToLua.CheckString(L, 7);
				bool arg6 = LuaDLL.luaL_checkboolean(L, 8);
				obj.NewUISpineAni(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else if (count == 9)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 6);
				string arg5 = ToLua.CheckString(L, 7);
				bool arg6 = LuaDLL.luaL_checkboolean(L, 8);
				bool arg7 = LuaDLL.luaL_checkboolean(L, 9);
				obj.NewUISpineAni(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else if (count == 10)
			{
				CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 6);
				string arg5 = ToLua.CheckString(L, 7);
				bool arg6 = LuaDLL.luaL_checkboolean(L, 8);
				bool arg7 = LuaDLL.luaL_checkboolean(L, 9);
				string arg8 = ToLua.CheckString(L, 10);
				obj.NewUISpineAni(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.ScriptFunc.NewUISpineAni");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPrefab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			LuaFunction arg3 = ToLua.CheckLuaFunction(L, 5);
			obj.LoadPrefab(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TextureToSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
			UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.CheckObject(L, 2, typeof(UnityEngine.Texture2D));
			UnityEngine.Sprite o = obj.TextureToSprite(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConvertToEaseType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.ScriptFunc obj = (CFramework.ScriptFunc)ToLua.CheckObject<CFramework.ScriptFunc>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			DG.Tweening.Ease o = obj.ConvertToEaseType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

