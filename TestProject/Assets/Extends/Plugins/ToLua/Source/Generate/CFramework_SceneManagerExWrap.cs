//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CFramework_SceneManagerExWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CFramework.SceneManagerEx), typeof(CFramework.BaseManager<CFramework.SceneManagerEx>));
		L.RegFunction("Init", Init);
		L.RegFunction("EnterScene", EnterScene);
		L.RegFunction("AddWindow", AddWindow);
		L.RegFunction("AddEvent", AddEvent);
		L.RegFunction("RemoveEvent", RemoveEvent);
		L.RegFunction("GetWindow", GetWindow);
		L.RegFunction("RemoveWindow", RemoveWindow);
		L.RegFunction("RemoveAllWindow", RemoveAllWindow);
		L.RegFunction("EnterWaitScene", EnterWaitScene);
		L.RegFunction("OnSceneUnloaded", OnSceneUnloaded);
		L.RegFunction("OnViewChildDispose", OnViewChildDispose);
		L.RegFunction("OnViewDispose", OnViewDispose);
		L.RegFunction("StartPreload", StartPreload);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CurrScene", get_CurrScene, set_CurrScene);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterScene(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 7)
			{
				CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string[] arg1 = ToLua.CheckStringArray(L, 3);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 4);
				LuaFunction arg3 = ToLua.CheckLuaFunction(L, 5);
				string arg4 = ToLua.CheckString(L, 6);
				LuaTable arg5 = ToLua.CheckLuaTable(L, 7);
				obj.EnterScene(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 8 && TypeChecker.CheckTypes<System.Action<CFramework.BaseScene>, System.Action<int>, string, LuaInterface.LuaTable>(L, 5))
			{
				CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string[] arg1 = ToLua.CheckStringArray(L, 3);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 4);
				System.Action<CFramework.BaseScene> arg3 = (System.Action<CFramework.BaseScene>)ToLua.ToObject(L, 5);
				System.Action<int> arg4 = (System.Action<int>)ToLua.ToObject(L, 6);
				string arg5 = ToLua.ToString(L, 7);
				LuaTable arg6 = ToLua.ToLuaTable(L, 8);
				obj.EnterScene(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else if (count == 8 && TypeChecker.CheckTypes<LuaInterface.LuaFunction, string, LuaInterface.LuaTable, bool>(L, 5))
			{
				CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string[] arg1 = ToLua.CheckStringArray(L, 3);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 4);
				LuaFunction arg3 = ToLua.ToLuaFunction(L, 5);
				string arg4 = ToLua.ToString(L, 6);
				LuaTable arg5 = ToLua.ToLuaTable(L, 7);
				bool arg6 = LuaDLL.lua_toboolean(L, 8);
				obj.EnterScene(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else if (count == 9)
			{
				CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string[] arg1 = ToLua.CheckStringArray(L, 3);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 4);
				System.Action<CFramework.BaseScene> arg3 = (System.Action<CFramework.BaseScene>)ToLua.CheckDelegate<System.Action<CFramework.BaseScene>>(L, 5);
				System.Action<int> arg4 = (System.Action<int>)ToLua.CheckDelegate<System.Action<int>>(L, 6);
				string arg5 = ToLua.CheckString(L, 7);
				LuaTable arg6 = ToLua.CheckLuaTable(L, 8);
				bool arg7 = LuaDLL.luaL_checkboolean(L, 9);
				obj.EnterScene(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.SceneManagerEx.EnterScene");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 9)
			{
				CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				string[] arg3 = ToLua.CheckStringArray(L, 5);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
				LuaTable arg5 = ToLua.CheckLuaTable(L, 7);
				LuaFunction arg6 = ToLua.CheckLuaFunction(L, 8);
				bool arg7 = LuaDLL.luaL_checkboolean(L, 9);
				obj.AddWindow(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else if (count == 10)
			{
				CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				string[] arg3 = ToLua.CheckStringArray(L, 5);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
				LuaTable arg5 = ToLua.CheckLuaTable(L, 7);
				LuaFunction arg6 = ToLua.CheckLuaFunction(L, 8);
				bool arg7 = LuaDLL.luaL_checkboolean(L, 9);
				bool arg8 = LuaDLL.luaL_checkboolean(L, 10);
				obj.AddWindow(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.SceneManagerEx.AddWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Transform arg2 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 4);
				LuaFunction arg3 = ToLua.CheckLuaFunction(L, 5);
				obj.AddEvent(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Transform arg2 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 4);
				LuaFunction arg3 = ToLua.CheckLuaFunction(L, 5);
				string arg4 = ToLua.CheckString(L, 6);
				obj.AddEvent(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.SceneManagerEx.AddEvent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Transform arg2 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 4);
				obj.RemoveEvent(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Transform arg2 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				obj.RemoveEvent(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.SceneManagerEx.RemoveEvent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			CFramework.BaseWindow o = obj.GetWindow(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveWindow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
			obj.RemoveAllWindow();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterWaitScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
			obj.EnterWaitScene();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSceneUnloaded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.OnSceneUnloaded(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnViewChildDispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
			obj.OnViewChildDispose(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnViewDispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.OnViewDispose(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartPreload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
			System.Action<float,int> arg0 = (System.Action<float,int>)ToLua.CheckDelegate<System.Action<float,int>>(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			obj.StartPreload(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)ToLua.CheckObject<CFramework.SceneManagerEx>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrScene(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)o;
			CFramework.BaseScene ret = obj.CurrScene;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrScene on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CurrScene(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CFramework.SceneManagerEx obj = (CFramework.SceneManagerEx)o;
			CFramework.BaseScene arg0 = (CFramework.BaseScene)ToLua.CheckObject<CFramework.BaseScene>(L, 2);
			obj.CurrScene = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrScene on a nil value");
		}
	}
}

