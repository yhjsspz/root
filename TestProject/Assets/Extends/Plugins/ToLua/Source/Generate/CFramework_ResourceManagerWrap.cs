//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CFramework_ResourceManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CFramework.ResourceManager), typeof(CFramework.BaseManager<CFramework.ResourceManager>));
		L.RegFunction("Init", Init);
		L.RegFunction("DisposeView", DisposeView);
		L.RegFunction("GetAsset", GetAsset);
		L.RegFunction("GetTexture2DAsset", GetTexture2DAsset);
		L.RegFunction("LoadPrefabAsync", LoadPrefabAsync);
		L.RegFunction("LoadListAsyncCoroutine", LoadListAsyncCoroutine);
		L.RegFunction("LoadPrefabList", LoadPrefabList);
		L.RegFunction("LoadPrefab", LoadPrefab);
		L.RegFunction("LoadAsyncCoroutine", LoadAsyncCoroutine);
		L.RegFunction("DisposeViewCache", DisposeViewCache);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisposeView(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DisposeView(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAsset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<UnityEngine.AssetBundle, string>(L, 2))
			{
				CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
				UnityEngine.AssetBundle arg0 = (UnityEngine.AssetBundle)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.Transform o = obj.GetAsset(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.Transform o = obj.GetAsset(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.ResourceManager.GetAsset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTexture2DAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
			UnityEngine.AssetBundle arg0 = (UnityEngine.AssetBundle)ToLua.CheckObject(L, 2, typeof(UnityEngine.AssetBundle));
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.Texture2D o = obj.GetTexture2DAsset(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPrefabAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<string, System.Action<UnityEngine.AssetBundle>>(L, 3))
			{
				CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				System.Action<UnityEngine.AssetBundle> arg2 = (System.Action<UnityEngine.AssetBundle>)ToLua.ToObject(L, 4);
				obj.LoadPrefabAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string[], System.Action<System.Collections.Generic.List<UnityEngine.AssetBundle>>>(L, 3))
			{
				CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string[] arg1 = ToLua.ToStringArray(L, 3);
				System.Action<System.Collections.Generic.List<UnityEngine.AssetBundle>> arg2 = (System.Action<System.Collections.Generic.List<UnityEngine.AssetBundle>>)ToLua.ToObject(L, 4);
				obj.LoadPrefabAsync(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.ResourceManager.LoadPrefabAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadListAsyncCoroutine(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string[] arg1 = ToLua.CheckStringArray(L, 3);
				System.Collections.IEnumerator o = obj.LoadListAsyncCoroutine(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string[] arg1 = ToLua.CheckStringArray(L, 3);
				System.Action<System.Collections.Generic.List<UnityEngine.AssetBundle>> arg2 = (System.Action<System.Collections.Generic.List<UnityEngine.AssetBundle>>)ToLua.CheckDelegate<System.Action<System.Collections.Generic.List<UnityEngine.AssetBundle>>>(L, 4);
				System.Collections.IEnumerator o = obj.LoadListAsyncCoroutine(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.ResourceManager.LoadListAsyncCoroutine");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPrefabList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string[] arg1 = ToLua.CheckStringArray(L, 3);
			System.Collections.Generic.List<UnityEngine.AssetBundle> o = obj.LoadPrefabList(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPrefab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.AssetBundle o = obj.LoadPrefab(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsyncCoroutine(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Collections.IEnumerator o = obj.LoadAsyncCoroutine(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Action<UnityEngine.AssetBundle> arg2 = (System.Action<UnityEngine.AssetBundle>)ToLua.CheckDelegate<System.Action<UnityEngine.AssetBundle>>(L, 4);
				System.Collections.IEnumerator o = obj.LoadAsyncCoroutine(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CFramework.ResourceManager.LoadAsyncCoroutine");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisposeViewCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DisposeViewCache(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CFramework.ResourceManager obj = (CFramework.ResourceManager)ToLua.CheckObject<CFramework.ResourceManager>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

